@page "/getphotos"
@using AppSystem.Component
@using PhotoViewer.Services
@using Models
@using ConstStr
@using SixLabors.ImageSharp
@using System.IO.Compression
@using SixLabors.ImageSharp.Processing
@inject Config Config
@inject IJSRuntime Js

<PageTitle>获取靓照</PageTitle>

<div id="app">
    <h1 id="title">* 我是外国佬.jpg</h1>
    <div id="form">
        <div class="single-input-container">
            <div class="keyword">性别</div>
            <select class="single-input" @bind="@_request.Gender">
                <option selected="selected" value="">随机
                </option>
                <option value="@Gender.Male">@Gender.Male</option>
                <option value="@Gender.Female">@Gender.Female</option>
            </select>
        </div>
        <div class="single-input-container">
            <div class="keyword">年龄</div>
            <select class="single-input" @bind="@_request.Age">
                <option selected="selected" value="">随机</option>
                <option value="@AgeRange.Old">@AgeRange.Old</option>
                <option value="@AgeRange.MidAged">@AgeRange.MidAged</option>
                <option value="@AgeRange.Young">@AgeRange.Young</option>
            </select>
        </div>
        <div class="single-input-container">
            <div class="keyword">数量</div>
            <input class="single-input" @bind="_request.Num" @oninput="() => { _request.Num = _request.Num switch
{
    >= 100 => 100,
    <= 0 => 1,
    _ => _request.Num
    }; }" />
        </div>
        <div class="single-input-container">
            <div class="keyword">关键词(可选)</div>
            <input class="single-input" value="@_request.Name"/>
        </div>
        @if (_loaded)
        {
            <button class="input-button" @onclick="@LoadImages">
                获取靓照
            </button>
        }
        else
        {
            <button class="input-button btnDisabled">
                靓照获取中
            </button>
        }
        @if (_downloading)
        {
            <button class="input-button btnDisabled">
                下载中...
            </button>
        }
        else
        {
            <button class="input-button" @onclick="@SaveImages">
                下载一大包靓照
            </button>
        }
    </div>
    <div id="result">
        @foreach (var photo in _photoLinks)
        {
            <PhotoComponent Href="@photo"/>
        }
    </div>
</div>

<style type="text/css">
    #app {
        color: #464646;
    }

    #title {
        background-color: #d4d4d4;
        border-radius: 20px;
        padding-top: 15px;
        padding-left: 15px;
        padding-bottom: 15px;
    }

    #form {
        display: flex;
        background-color: #e9e9e9;
        border-radius: 20px;
        padding-top: 15px;
        padding-left: 15px;
        padding-bottom: 15px;
    }

    .input-button {
        width: 140px;
        border: 0px;
        margin: 10px;
        padding: 5px;
        background-color: #649bda;
        color: rgb(238, 238, 238);
        transition: 0.15s;
        border-radius: 5px;
        font-weight: 600;
        box-shadow: 1px 1px 3px 1px rgba(8, 8, 8, 0.2);
        font-family: '黑体', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }

    .btnDisabled {
        color: rgb(255, 255, 255);
        background-color: #5e8ec5;
        font-family: '黑体', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }

    .input-button:hover {
        font-weight: 600;
        color: rgb(255, 255, 255);
        background-color: #5e8ec5;
        font-family: '黑体';
        transform: scale(1.15);
    }

    .single-input {
        margin-left: 8px;
        margin-right: 10px;
        width: 120px;
        height: 28px;
    }

    .single-input-container {
        display: flex;
        align-items: center;
    }

    .input-button:active {
        color: rgb(63, 63, 63);

        background-color: #c0c0c0;
        transform: scale(1.05);
    }

    #result {
        display: flex;
        padding: 10px;
        flex-flow: row wrap;
        margin-top: 10px;
    }
</style>

@code {
    readonly PhotoRequest _request = new();
    List<string> _photoLinks = new();
    bool _loaded = true;
    bool _downloading = false;

    async Task LoadImages()
    {
        Console.WriteLine(_request.Num);
        _loaded = false;
        if (_request.Age.Length <= 0 && _request.Gender.Length <= 0)
        {
            await FetchRandomPhotos();
            _loaded = true;
            return;
        }
        if (_request.Age.Length <= 0)
        {
            _request.AgeRandomizer();
        }
        if (_request.Gender.Length <= 0)
        {
            _request.GenderRandomizer();
        }
        await FetchPhotos();
        _loaded = true;
    }

    async Task FetchPhotos()
    {
        _photoLinks.Clear();
        var client = new HttpClient();
        client.BaseAddress = new Uri(Config.GetApiRoot);
        var response = await client.PostAsJsonAsync<PhotoRequest>(Config.GetPhotoEndpoint, _request);
        _photoLinks = await response.Content.ReadFromJsonAsync<List<string>>() ?? new List<string>();
    }
    async Task FetchRandomPhotos()
    {
        _photoLinks.Clear();
        var client = new HttpClient();
        client.BaseAddress = new Uri(Config.GetApiRoot);
        var response = await client.GetFromJsonAsync<List<string>>($"{Config.GetRandomPhotoEndpoint}?num={_request.Num}");
        _photoLinks = response ?? new List<string>();
    }
    async Task SaveImages()
    {       
        var imgFolder = Path.Combine($"{FontendConfigPath.TempRoot}", $"{Guid.NewGuid()}");
        var zipFile = Path.Combine($"{FontendConfigPath.TempRoot}", $"{Guid.NewGuid()}.zip");
        Directory.CreateDirectory(imgFolder);

        _downloading = true;
        try
        {
            var currentLinks = new List<string>();
            currentLinks.AddRange(_photoLinks);
            foreach (var base64 in _photoLinks.Select(link => link.Replace("data:image/png;base64,", "")))
            {
                var image = await Image.LoadAsync(new MemoryStream(Convert.FromBase64String(base64)));
                await image.SaveAsJpegAsync(Path.Combine(imgFolder, $"{Guid.NewGuid()}.jpg"));
            }
            ZipFile.CreateFromDirectory(imgFolder, zipFile);
            var zip = File.OpenRead(zipFile);
            using var streamRef = new DotNetStreamReference(stream: zip);
            await Js.InvokeVoidAsync("downloadFileFromStream", $"靓照_{Guid.NewGuid()}.zip", streamRef);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToString());
        }
        finally
        {
            Directory.Delete(imgFolder, true);
            File.Delete(zipFile);
            _downloading = false;
        }
        _downloading = false;
    }
}
